/* eslint-disable no-console */
// @noflow
const path = require('path');
const gitRootDir = require('git-root-dir');
const execa = require('execa');
const os = require('os');

async function parseArgv() {
  return require('yargs/yargs')(process.argv.slice(2))
    .usage('Usage: $0 [options]')

    .alias('debug', 'd')
    .boolean('debug')
    .default('debug', false)
    .describe('debug', 'build in DEBUG mode')

    .string('voip-repo')
    .describe('voip-repo', 'the repo folder of voip stack')
    .argv;
}

async function main() {
  let yargv = await parseArgv();
  const ROOT = await gitRootDir(__dirname);
  const ELECTRON_VERSIONS = require(path.resolve(
    ROOT,
    'web/scripts/build/lib/configuration/constants/electron_versions',
  ));

  const VOIP_BUILD_PATH = path.resolve(ROOT, 'web/custom_modules/wavoip');
  let nodeGyp = path.resolve(VOIP_BUILD_PATH, 'node_modules/.bin/node-gyp');

  if (os.platform() === 'win32') {
    nodeGyp = path.resolve(VOIP_BUILD_PATH, 'node_modules/.bin/node-gyp.cmd');
  }

  let electronVersion = ELECTRON_VERSIONS['development'].electron;
  if (process.env.BUILD_ENV) {
    electronVersion = ELECTRON_VERSIONS[process.env.BUILD_ENV].electron;
  }
  if (yargv.debug) {
    process.env.BUILD_VOIP_BINDING_DEBUG = true;
  }

  let VOIP_REPO_PATH = path.resolve(ROOT, 'web/submodules/voip');
  if (yargv.voipRepo) {
    VOIP_REPO_PATH = path.resolve(yargv.voipRepo);
  }

  const buildEnv = {
    ...process.env,
    USERPROFILE: path.resolve(os.homedir(), '.electron-gyp'),
    npm_config_disturl: 'https://www.electronjs.org/headers',
    npm_config_runtime: 'electron',
    npm_config_devdir: path.resolve(os.homedir(), '.electron-gyp'),
    VOIP_REPO_PATH,
    VOIP_BUILD_PATH,
  };

  const nodeGypArgs = [
    'rebuild',
    '--target=' + electronVersion,
    '--arch=x64',
    '--dist-url=https://www.electronjs.org/headers',
    '--build-from-source',
  ];

  // eslint-disable-next-line no-constant-condition
  if (process.env.SANDCASTLE_ALIAS === 'web-build-win32-ia32') {
    // skip wavoip on 32 bit windows
    console.log('skipped for win32');
    process.exit(0);
  }

  if (process.env.BUILD_VOIP_BINDING_DEBUG) {
    console.log('building in DEBUG mode');
    nodeGypArgs.push('--debug');
    nodeGypArgs.push('--node_with_ltcg=false');
  } else {
    console.log('building in RELEASE mode');
  }

  try {
    await execa(nodeGyp, nodeGypArgs, {
      env: buildEnv,
      ...(process.env.BUILD_VOIP_BINDING_DEBUG && { stdio: 'inherit' }),
    });
  } catch (error) {
    process.exit(1);
  }
}

main().catch(e => console.error(e));
